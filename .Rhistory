f$x
f$x[1]
f$x
class(f$x)
dim(f$x)
lines(f$x[,1], f$fitted[,1], lty=2)
f$fitted
lines(f$x[,1], f$fitted, lty=2)
plot(wage ~ educ, data, pch=18, col='grey')
lines(ksmooth(data$educ, data$wage, 'normal', 3))
lines(smooth.spline(data$educ, data$wage), col='grey')
f <- loess(wage ~ educ, data, span=.6)
lines(f$x[,1], f$fitted, lty=2)
data$wage <- data$wage[order(data$educ)]
data$educ <- sort(data$educ)
plot(wage ~ educ, data, pch=18, col='grey')
lines(ksmooth(data$educ, data$wage, 'normal', 3))
lines(smooth.spline(data$educ, data$wage), col='grey')
f <- loess(wage ~ educ, data, span=.6)
lines(f$x[,1], f$fitted, lty=2)
wage.mean <- tapply(data$wage, list(data$educ), mean)
plot(0:18, wage.mean)
plot(0:18, wage.mean, xlab='educ')
plot(0:18, wage.mean, xlab='educ', pch=18, col='grey')
wage.fitted <- tapply(f$fitted, list(f$x), mean)
points(0:18, wage.fitted, pch=20, col='black')
sqrt.resids <- sqrt(abs(f$fitted - data$wage))
f <- loess(sqrt.resids ~ data$educ, span=.6)
plot(sqrt.resids ~ data$educ, pch=18, col='grey')
plot(sqrt.resids ~ data$educ, pch=18, col='grey', xlab='educ')
lines(f$x, f$fitted)
data(prostate)
data <- prostate[, c('lweight', 'age')]
View(data)
plot(lweight ~ age, data, pch=18, col='grey')
lines(ksmooth(data$age, data$lweight, 'normal', 3))
lines(ksmooth(data$age, data$lweight, 'normal', 5))
lines(smooth.spline(data$age, data$lweight), col='grey')
f <- loess(lweight ~ age, data, span=.6)
lines(f$x[,1], f$fitted, lty=2, col='grey')
data$lweight <- data$lweight[order(data$age)]
data$age <- sort(data$age)
plot(lweight ~ age, data, pch=18, col='grey')
lines(ksmooth(data$age, data$lweight, 'normal', 3))
lines(ksmooth(data$age, data$lweight, 'normal', 5), lty=2)
lines(smooth.spline(data$age, data$lweight), col='grey')
f <- loess(lweight ~ age, data, span=.6)
lines(f$x[,1], f$fitted, lty=2, col='grey')
?ksmooth
data(divusa)
data <- divuse[, c('divorce', 'year')]
data <- divusa[, c('divorce', 'year')]
data$divorce <- data$divorce[order(data$year)]
data$year <- sort(data$year)
plot(divorce ~ year, data, pch=18, col='grey')
lines(ksmooth(data$year, data$divorce, 'normal', 3))
lines(smooth.spline(data$year, data$divorce), col='grey')
f <- loess(divorce ~ year, data, span=.6)
lines(f$x[,1], f$fitted, lty=2)
data <- divusa[, c('military', 'year')]
data$military <- data$military[order(data$year)]
data$year <- sort(data$year)
plot(military ~ year, data, pch=18, col='grey')
lines(ksmooth(data$year, data$military, 'normal', 3))
lines(smooth.spline(data$year, data$military), col='grey')
f <- loess(military ~ year, data, span=.6)
lines(f$x[,1], f$fitted, lty=2)
data(aatemp)
summary(aatemp)
data <- aatemp
data$temp <- data$temp[order(data$year)]
data$year <- sort(data$year)
plot(temp ~ year, data, pch=18, col='grey')
lines(ksmooth(data$year, data$temp, 'normal', 3))
lines(ksmooth(data$year, data$temp, 'normal', 5))
lines(ksmooth(data$year, data$temp, 'normal', 2))
lines(ksmooth(data$year, data$temp, 'normal', 6))
plot(temp ~ year, data, pch=18, col='grey')
lines(ksmooth(data$year, data$temp, 'normal', 6))
lines(ksmooth(data$year, data$temp, 'normal', 10))
plot(temp ~ year, data, pch=18, col='grey')
lines(ksmooth(data$year, data$temp, 'normal', 10))
lines(smooth.spline(data$year, data$temp), col='grey')
f <- loess(temp ~ year, data, span=.6)
lines(f$x[,1], f$fitted, lty=2)
lines(ksmooth(data$year, data$temp, 'normal', 20))
f <- loess(temp ~ year, data, span=.2)
lines(f$x[,1], f$fitted, lty=2)
install.packages('mgcv')
install.packages('gss')
install.packages('gam')
install.packages('mda')
install.packages('mda')
install.packages('mda')
X <- matrix(c(1,3,4,5), ncol=2)
X%*%solve(t(X)%*%X)%*%t(X)
install.packages('acepack')
install.packages('acepack')
install.packages('mda')
install.packages('mda')
install.packages('mda')
install.packages('mda')
data(fat)
library(mda)
?gam
library(mgcv)
mod <- gam(siri ~ s(weight) + s(height) + s(adipos) + s(neck) + s(chest) + s(abdom) + s(hip) + s(thigh) + s(knee) + s(ankle) + s(forearm) + s(biceps) + s(wrist) + s(age), fat)
mod <- gam(siri ~ s(weight) + s(height) + s(adipos) + s(neck) + s(chest) + s(abdom) + s(hip) + s(thigh) + s(knee) + s(ankle) + s(forearm) + s(biceps) + s(wrist) + s(age), data=fat)
summary(mod)
mod <- gam(siri ~ s(abdom) + s(hip) + s(biceps) + s(wrist) + s(age), data=fat)
summary(mod)
plot(mod)
mod1 <- gam(siri ~ s(weight) + s(height) + s(adipos) + s(neck) + s(chest) + s(abdom) + s(hip) + s(thigh) + s(knee) + s(ankle) + s(forearm) + s(biceps) + s(wrist) + s(age), data=fat)
mod2 <- gam(siri ~ s(abdom) + s(hip) + s(biceps) + s(wrist) + s(age), data=fat)
anova(mod1, mod2)
anova(mod1, mod2, test='F')
anova(mod2, mod1, test='F')
summary(mod1)
mod2 <- gam(siri ~ s(neck) + s(abdom) + s(hip) + s(biceps) + s(wrist) + age, data=fat)
mod2 <- gam(siri ~ s(neck) + s(abdom) + s(hip) + s(biceps) + s(wrist) + s(age), data=fat)
anova(mod2, mod1, test='F')
summary(mod2)
plot(mod)
plot(mod2)
plot(mod2)
anova(mod3, mod2, test='F')
mod3 <- gam(siri ~ neck + s(abdom) + s(hip) + s(biceps) + wrist + age, data=fat)
anova(mod3, mod2, test='F')
mod3 <- gam(siri ~ s(neck) + s(abdom) + s(hip) + s(biceps) + s(wrist) + age, data=fat)
anova(mod3, mod2, test='F')
summary(mod2)
library(xtable)
xtable(summary(mod2))
?summary.gam
anova(mod2, mod1, test='F')
library(acepack)
data(trees)
mod1 <- gam(Volume ~ s(Girth) + s(Height), data=trees)
mod1
summary(mod1)
plot(mod1)
plot(mod1)
x <- trees[,-3]
y <- trees[, 3]
View(trees)
acefit <- ace(x, y)
mod2 <- lm(acefit$ty ~ acefit$tx)
summary(mod2)
mod1 <- gam(Volume ~ s(Girth) + s(Height), data=trees)
summary(mod2)
plot(trees$Volume, acefit$ty, ylab=expression(theta(Volume)), xlab="Volume")
plot(trees$Volume, acefit$ty, ylab = 'theta(Volume)', xlab="Volume")
plot(trees$Volume, acefit$ty, ylab = 'theta(Volume)', xlab="Volume", pch=18, col='grey')
i <- order(trees$Volume)
gs <- lm(acefit$ty[i] ~ sqrt(trees$Volume[i]))
lines(trees$Volume[i], gs$fit, lty=2)
gl <- lm(acefit$ty[i] ~ log(trees$Volume[i]))
lines(trees$Volume[i], gl$fit, lty=3)
plot(x[,1],acefit$tx[,1], ylab="f(Girth)", xlab="Girth")
plot(trees$Volume, acefit$ty, ylab = 'theta(Volume)', xlab="Volume", pch=18, col='grey')
gs <- lm(acefit$ty[i] ~ sqrt(trees$Volume[i]))
lines(trees$Volume[i], gs$fit, lty=2)
gl <- lm(acefit$ty[i] ~ log(trees$Volume[i]))
lines(trees$Volume[i], gl$fit, lty=3)
plot(x[,1],acefit$tx[,1], ylab="f(Girth)", xlab="Girth")
gs <- lm(acefit$tx[i,1] ~ sqrt(trees$Girth[i]))
plot(x[,1],acefit$tx[,1], ylab="f(Girth)", xlab="Girth", pch=18, col='grey')
gs <- lm(acefit$tx[i,1] ~ sqrt(trees$Girth[i]))
lines(trees$Girth[i], gs$fit, lty=2)
gl <- lm(acefit$tx[i,1] ~ log(trees$Girth[i]))
lines(trees$Girth[i], gl$fit, lty=3)
plot(x[,2],acefit$tx[,2], ylab="f(Height)", xlab="Height", col='grey', pch=18)
gs <- lm(acefit$tx[i,2] ~ sqrt(trees$Height[i]))
lines(trees$Height[i], gs$fit, lty=2)
gl <- lm(acefit$tx[i,2] ~ log(trees$Height[i]))
lines(trees$Height[i], gl$fit, lty=3)
@
summary(mod2)
avasmod <- avas(x, y)
mod3 <- lm(avasmod$ty ~ avasmod$tx)
summary(mod3)
plot(y, avasmod$ty)
plot(y, avasmod$ty, xlab='Volume', ylab='theta(Volume)')
gs <- lm(avasmod$ty[i] ~ sqrt(trees$Volume[i]))
lines(trees$Volume[i], gs$fit, lty=2)
gl <- lm(avasmod$ty[i] ~ log(trees$Volume[i]))
lines(trees$Volume[i], gl$fit, lty=3)
plot(x[,1],avasmod$tx[,1], ylab="f(Girth)", xlab="Girth")
plot(x[,2],avasmod$tx[,2], ylab="f(Height)", xlab="Height")
plot(y, avasmod$ty, xlab='Volume', ylab='theta(Volume)')
data(pima)
pima$glucose[pima$glucose==0] <- NA
pima$diastolic[pima$diastolic==0] <- NA
pima$triceps[pima$triceps==0] <- NA
pima$insulin[pima$insulin==0] <- NA
pima$bmi[pima$bmi==0] <- NA
pima <- pima[complete.cases(pima),]
mod1 <- gam(test ~ s(diabetes) + s(pregnant) + s(glucose) s(diastolic) + s(triceps) + s(insulin) + s(bmi) + s(age), family=binomial, scale=-1, data=pima)
mod1 <- gam(test ~ s(diabetes) + s(pregnant) + s(glucose) + s(diastolic) + s(triceps) + s(insulin) + s(bmi) + s(age), family=binomial, scale=-1, data=pima)
summary(mod1)
gam.check(mod1, type='deviance')
?gam.check
summary(mod1)
gam.check(mod1, type='deviance', plot=FALSE)
warnings()
gam.check(mod1, type='deviance', type='n')
View(pima)
pred <- predict(mod1, data.frame(pregnant=1, glucose=99, diastolic=64, triceps=22, insulin=76, bmi=27, diabetes=.25, age=25), type='link', se=TRUE)
ilogit(pred$fit)
pred$fit+pred$se.fit*c(-1, 1)
ilogit(pred$fit+pred$se.fit*c(-1, 1))
data(dvisits)
s(income) + s(levyplus) + s(freepoor) + s(freerepa) + s(illness) + s(actdays) + s(hscore) + s(chcond1) + s(chcond2), family=poisson, scale=-1, data=dvisits)
mod1 <- gam(doctorco ~ s(sex) + s(age) +
s(income) + s(levyplus) + s(freepoor) + s(freerepa) + s(illness) + s(actdays) + s(hscore) + s(chcond1) + s(chcond2), family=poisson, scale=-1, data=dvisits)
mod1 <- gam(doctorco ~ sex + s(age) + s(income) + levyplus + freepoor + freerepa + s(illness) + s(actdays) + s(hscore) + s(chcond1) + s(chcond2), family=poisson, scale=-1, data=dvisits)
View(dvisits)
mod1 <- gam(doctorco ~ sex + s(age) + s(income) + levyplus + freepoor + freerepa + s(illness) + s(actdays) + s(hscore) + chcond1 + chcond2, family=poisson, scale=-1, data=dvisits)
mod1 <- gam(doctorco ~ sex + s(age) + s(income) + levyplus + freepoor + freerepa + s(illness, k=6) + s(actdays) + s(hscore) + chcond1 + chcond2, family=poisson, scale=-1, data=dvisits)
summary(mod1)
mod2 <- gam(doctorco ~ sex + s(age) + s(income) + freepoor + s(illness, k=6) + s(actdays) + s(hscore), family=poisson, scale=-1, data=dvisits)
summary(mod2)
anova(mod2, mod1, test='F')
plot(mod2)
plot(mod2)
gam.check(mod2, type='deviance')
?dvisits
summary(mod2)
summary(mod1)
dim(dvisits)
subject <- dvisits[dim(dvisits)[1],]
pred <- predict(mod2, subhect, type='response')
pred <- predict(mod2, subject, type='response')
pred
summary(dvisits)
(for(i in 0:9) dpois(i, pred))
(for(i in 0:9) dpois(i, pred))
pred
dpois(0, pred)
for(i in 0:9) print(dpois(i, pred))
data(motorins)
data <- motorins[motorins$Zone==1, ]
summary(data)
class(data$Kilometers)
class(data$Kilometres)
data$Kilometres <- as.numeric(data$Kilometres)
mod1 <- gam(I(log(Payment/Insured)) ~ s(Kilometres, k=5) + Make +s(Bonus, k=7), data=data)
summary(mod1)
mod2 <- gam(Payment ~ s(Kilometres, k=5) + Make + s(Bonus, k=7), family=Gamma(link=log), offset=log(Insured), data=data)
summary(mod2)
update.packages()
rm(list=ls())
lapply(c('RCurl', 'superdiag', 'mice', 'R2jags', 'xtable'), library, character.only=TRUE)
setwd('/home/david/MLM/')
load('out.table.Rdata')
xtable(out.table[[1]][-c(1:44, 49),], caption='Model with frac')
xtable(out.table[[1]][-(1:44),], caption='Model with frac')
xtable(out.table[[2]][-(1:44),], caption='Model with contest')
xtable(out.table[[3]][-(1:44),], caption='Model with vol')
dat_url <- getURL('https://raw.githubusercontent.com/carlson9/MLM/master/judicial_data.txt')
data <- read.table(text = dat_url, row.names=NULL)
data <- data[,c('country', 'year', 'LJI', 'system', 'colonial', 'polity', 'years', 'frac', 'contest', 'vol')]
drop <- apply(data, 1, function(x) all(is.na(x)))
data <- data[!drop,]
apply(data, 2, function(x) sum(is.na(x)))
apply(data, 2, function(x) sum(is.na(x)))[8:10]
xtable(apply(data, 2, function(x) sum(is.na(x)))[8:10], caption = 'Missingness')
xtable(as.matrix(apply(data, 2, function(x) sum(is.na(x)))[8:10]), caption = 'Missingness')
xtable(t(as.matrix(apply(data, 2, function(x) sum(is.na(x)))[8:10])), caption = 'Missingness')
load('subset.mods.Rdata')
autocorr.plot(as.mcmc(jm1))
?autocorr.plot
update(jm1, n.thin=10)
?thin
jm1.1 <- thin(jm1)
gelman.plot(as.mcmc(jm1))
?gelman.plot
pdf('mod1_gelmanplot.pdf')
gelman.plot(as.mcmc(jm1), ask=FALSE)
dev.off()
pdf('mod2_gelmanplot.pdf')
gelman.plot(as.mcmc(jm2), ask=FALSE)
dev.off()
pdf('mod3_gelmanplot.pdf')
gelman.plot(as.mcmc(jm3), ask=FALSE)
dev.off()
?autocorr.plot
pdf('mod1_autocorr.pdf')
autocorr.plot(as.mcmc(jm1), ask=FALSE)
dev.off()
pdf('mod2_autocorr.pdf')
autocorr.plot(as.mcmc(jm2), ask=FALSE)
dev.off()
pdf('mod3_autocorr.pdf')
autocorr.plot(as.mcmc(jm3), ask=FALSE)
dev.off()
geweke.plot(as.mcmc(jm1))
?geweke.plot
rm(list=ls())
lapply(c('RCurl', 'superdiag', 'mice', 'R2jags', 'xtable'), library, character.only=TRUE)
setwd('/home/david/MLM/')
m <- 10
load('judicial2.mods.Rdata')
DIC(judicial.mods[[1]])
judicial.mods[[1]]$BUGSoutput$DIC
judicial.mods[[2]]$BUGSoutput$DIC
library(stats4)
BIC(judicial.mods[[1]])
avg.DIC <- numeric()
for(k in 1:3){
#coef <- numeric()
#coef.sd <- numeric()
DIC <- numeric()
for(i in 1:m){
#coef <- cbind(coef, unlist(judicial.mods[[i+m*(k-1)]]$BUGSoutput$mean))
#coef.sd <- cbind(coef.sd, unlist(judicial.mods[[i+m*(k-1)]]$BUGSoutput$sd))
DIC <- c(DIC, judicial.mods[[i+m*(k-1)]]$BUGSoutput$DIC)
}
avg.DIC <- c(avg.DIC, mean(DIC))
#coef.mean <- apply(coef, 1, mean)
#between.var <- apply(coef, 1, var)
#within.var <- apply(coef.sd^2, 1, mean)
#impute.se.vec <- sqrt(within.var + ((m+1)/m)*between.var)
#impute.df <- (m-1)*(1 + (m/(m+1)) * within.var/between.var)^2
#gamma <- (m/(m+1)) * between.var/(within.var + ((m+1)/m)*between.var)
#full.df <- n - 1
#adj.full.df <- ((full.df+1)/(full.df+3)) * full.df*(1-gamma)
#adj.imp.df <- 1/(1/impute.df + 1/adj.full.df)
#out.table[[k]] <- round(cbind(coef.mean, impute.se.vec,
#                           coef.mean/impute.se.vec,
#                           1-pt(abs(coef.mean/impute.se.vec),adj.imp.df),
#                           coef.mean-1.96*impute.se.vec,
#                           coef.mean+1.96*impute.se.vec),6)
#colnames(out.table[[k]]) <- c('mean', 'se', 't value', 'Pr(>|t|)', '2.5%', '97.5%')
#rownames(out.table[[k]])[-(1:44)] <- c('system', 'polity', 'years', ifelse(k==1, 'frac',
#                                                                            ifelse(k==2, 'contest', 'vol')),
#                                       'deviance', 'g.0', 'Colonial_Spain', 'Colonial_UK', 'Colonial_Portugal',
#                                      'Colonial_France', 'sigma.a', 'sigma.y')
}
avg.DIC
dat_url <- getURL('https://raw.githubusercontent.com/carlson9/MLM/master/judicial_data.txt')
data <- read.table(text = dat_url, row.names=NULL)
data <- data[,c('country', 'year', 'LJI', 'system', 'colonial', 'polity', 'years', 'frac', 'contest', 'vol')]
drop <- apply(data, 1, function(x) all(is.na(x)))
data <- data[!drop,]
judicial.null <- 'model {
for(i in 1:n){
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a[country[i]] + b[1]*system[i] + b[2]*polity[i] + b[3]*years[i]
}
b[1] ~ dnorm (0, .0001)
b[2] ~ dnorm (0, .0001)
b[3] ~ dnorm (0, .0001)
b[4] ~ dnorm (0, .0001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
for(j in 1:J){
a[j] ~ dnorm (a.hat[j], tau.a)
a.hat[j] <- g.0 + g.1*colonial.esp[j] + g.2*colonial.brit[j] + g.3*colonial.port[j] +g.4*colonial.fran[j]
}
g.0 ~ dnorm (0, .0001)
g.1 ~ dnorm (0, .0001)
g.2 ~ dnorm (0, .0001)
g.3 ~ dnorm (0, .0001)
g.4 ~ dnorm (0, .0001)
tau.a <- pow (sigma.a, -2)
sigma.a ~ dunif (0, 100)
}'
y <- logit(data$LJI)
n <- dim(data)[1]
country.names <- unique(data$country)
J <- length(country.names)
colonial <- character()
country <- numeric()
for(j in 1:J){
colonial[j] <- data[data$country == country.names[j], 'colonial'][1]
country[data$country == country.names[j]] <- j
}
colonial <- as.factor(colonial)
colonial.esp <- ifelse(colonial == 2, 1, 0)
colonial.brit <- ifelse(colonial == 3, 1, 0)
colonial.port <- ifelse(colonial == 4, 1, 0)
colonial.fran <- ifelse(colonial == 5, 1, 0)
polity <- data$polity
years <- data$years
frac.data <- list('n', 'J', 'y', 'colonial.esp', 'colonial.brit', 'colonial.port', 'colonial.fran', 'system', 'polity', 'years', 'country')
frac.inits <- function(){
list(a=rnorm(J), b=rnorm(3), g.0=rnorm(1), g.1=rnorm(1), g.2=rnorm(1), g.3=rnorm(1), g.4=rnorm(1), sigma.y=runif(1), sigma.a=runif(1))
}
frac.parameters <- c('a', 'b', 'g.0', 'g.1', 'g.2', 'g.3', 'g.4', 'sigma.y', 'sigma.a')
judicial.mods[[31]] <- jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
lapply(c('RCurl', 'superdiag', 'mice', 'R2jags', 'xtable'), library, character.only=TRUE)
?logit
y <- logit(data$LJI)
n <- dim(data)[1]
country.names <- unique(data$country)
J <- length(country.names)
colonial <- character()
country <- numeric()
for(j in 1:J){
colonial[j] <- data[data$country == country.names[j], 'colonial'][1]
country[data$country == country.names[j]] <- j
}
colonial <- as.factor(colonial)
colonial.esp <- ifelse(colonial == 2, 1, 0)
colonial.brit <- ifelse(colonial == 3, 1, 0)
colonial.port <- ifelse(colonial == 4, 1, 0)
colonial.fran <- ifelse(colonial == 5, 1, 0)
polity <- data$polity
years <- data$years
frac.data <- list('n', 'J', 'y', 'colonial.esp', 'colonial.brit', 'colonial.port', 'colonial.fran', 'system', 'polity', 'years', 'country')
frac.inits <- function(){
list(a=rnorm(J), b=rnorm(3), g.0=rnorm(1), g.1=rnorm(1), g.2=rnorm(1), g.3=rnorm(1), g.4=rnorm(1), sigma.y=runif(1), sigma.a=runif(1))
}
frac.parameters <- c('a', 'b', 'g.0', 'g.1', 'g.2', 'g.3', 'g.4', 'sigma.y', 'sigma.a')
judicial.mods[[31]] <- jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
logit(.3)
library(boot)
logit(.3)
y <- logit(data$LJI)
n <- dim(data)[1]
country.names <- unique(data$country)
J <- length(country.names)
colonial <- character()
country <- numeric()
for(j in 1:J){
colonial[j] <- data[data$country == country.names[j], 'colonial'][1]
country[data$country == country.names[j]] <- j
}
colonial <- as.factor(colonial)
colonial.esp <- ifelse(colonial == 2, 1, 0)
colonial.brit <- ifelse(colonial == 3, 1, 0)
colonial.port <- ifelse(colonial == 4, 1, 0)
colonial.fran <- ifelse(colonial == 5, 1, 0)
polity <- data$polity
years <- data$years
frac.data <- list('n', 'J', 'y', 'colonial.esp', 'colonial.brit', 'colonial.port', 'colonial.fran', 'system', 'polity', 'years', 'country')
frac.inits <- function(){
list(a=rnorm(J), b=rnorm(3), g.0=rnorm(1), g.1=rnorm(1), g.2=rnorm(1), g.3=rnorm(1), g.4=rnorm(1), sigma.y=runif(1), sigma.a=runif(1))
}
frac.parameters <- c('a', 'b', 'g.0', 'g.1', 'g.2', 'g.3', 'g.4', 'sigma.y', 'sigma.a')
judicial.mods[[31]] <- jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
frac.data
system <- data$system
judicial.mods[[31]] <- jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
frac.inits
judicial.null <- 'model {
for(i in 1:n){
y[i] ~ dnorm(y.hat[i], tau.y)
y.hat[i] <- a[country[i]] + b[1]*system[i] + b[2]*polity[i] + b[3]*years[i]
}
b[1] ~ dnorm (0, .0001)
b[2] ~ dnorm (0, .0001)
b[3] ~ dnorm (0, .0001)
tau.y <- pow(sigma.y, -2)
sigma.y ~ dunif(0, 100)
for(j in 1:J){
a[j] ~ dnorm (a.hat[j], tau.a)
a.hat[j] <- g.0 + g.1*colonial.esp[j] + g.2*colonial.brit[j] + g.3*colonial.port[j] +g.4*colonial.fran[j]
}
g.0 ~ dnorm (0, .0001)
g.1 ~ dnorm (0, .0001)
g.2 ~ dnorm (0, .0001)
g.3 ~ dnorm (0, .0001)
g.4 ~ dnorm (0, .0001)
tau.a <- pow (sigma.a, -2)
sigma.a ~ dunif (0, 100)
}'
judicial.mods[[31]] <- jags(frac.data, frac.inits, frac.parameters, textConnection(judicial.null), n.chains=3, n.iter=30000, n.burnin=10000, n.thin=1, DIC=TRUE)
save(judicial.mods, file='judicial2.mods.Rdata')
judicial.mods[[31]]$BUGSoutput$DIC
judicial.mods[[31]]$BUGSoutput
xtable(judicial.mods[[31]]$BUGSoutput)
coef <- judicial.mods[[31]]$BUGSoutput$mean
se <- judicial.mods[[31]]$BUGSoutput$sd
judicial.mods[[31]]$BUGSoutput$df
?jags
names(judicial.mods[[31]]$BUGSoutput)
judicial.mods[[31]]$BUGSoutput$pD
coef <- judicial.mods[[31]]$BUGSoutput$mean
se <- judicial.mods[[31]]$BUGSoutput$sd
round(cbind(coef, se,
coef/se,
1-pt(abs(coef/se),judicial.mods[[31]]$BUGSoutput$pD),
coef-1.96*se,
coef+1.96*se),6)
coef
coef <- unlist(judicial.mods[[31]]$BUGSoutput$mean)
se <- unlist(judicial.mods[[31]]$BUGSoutput$sd)
round(cbind(coef, se,
coef/se,
1-pt(abs(coef/se),judicial.mods[[31]]$BUGSoutput$pD),
coef-1.96*se,
coef+1.96*se),6)
xtable(round(cbind(coef, se,
coef/se,
1-pt(abs(coef/se),judicial.mods[[31]]$BUGSoutput$pD),
coef-1.96*se,
coef+1.96*se),6)[-(1:44), ], caption='Null Model')
null.table <- round(cbind(coef, se,
coef/se,
1-pt(abs(coef/se),judicial.mods[[31]]$BUGSoutput$pD),
coef-1.96*se,
coef+1.96*se),6)[-(1:44), ]
colnames(null.table) <- c('mean', 'se', 't value', 'Pr(>|t|)', '2.5%', '97.5%')
rownames(null.table) <- c('system', 'polity', 'years',
'deviance', 'g.0', 'Colonial_Spain', 'Colonial_UK', 'Colonial_Portugal',
'Colonial_France', 'sigma.a', 'sigma.y')
xtable(null.table, caption='Null Model')
judicial.mods[[31]]$BUGSoutput$DIC
rm(list=ls())
